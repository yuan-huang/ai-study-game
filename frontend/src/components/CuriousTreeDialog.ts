import { Scene } from 'phaser';

export interface CuriousTreeDialogConfig {
    scene: Scene;
    x: number;
    y: number;
    width?: number;
    height?: number;
    onClose?: () => void;
}

export class CuriousTreeDialog {
    private scene: Scene;
    private container!: Phaser.GameObjects.Container;
    private background!: Phaser.GameObjects.Rectangle;
    private titleText!: Phaser.GameObjects.Text;
    private growthBar!: Phaser.GameObjects.Rectangle;
    private growthBarBg!: Phaser.GameObjects.Rectangle;
    private growthText!: Phaser.GameObjects.Text;
    private inputElement!: HTMLTextAreaElement;
    private submitButton!: Phaser.GameObjects.Rectangle;
    private submitButtonText!: Phaser.GameObjects.Text;
    private closeButton!: Phaser.GameObjects.Rectangle;
    private responseArea!: Phaser.GameObjects.Rectangle;
    private scrollContainer!: Phaser.GameObjects.Container;
    private chatHistory: Array<{ type: 'user' | 'ai', message: string }> = [];

    private isSubmitting: boolean = false;
    private onCloseCallback?: () => void;
    private currentGrowth: number = 0;
    private maxGrowth: number = 100;

    constructor(config: CuriousTreeDialogConfig) {
        this.scene = config.scene;
        this.onCloseCallback = config.onClose;

        const width = config.width || 900;
        const height = config.height || 700;

        this.loadGrowthData();
        this.createDialog(config.x, config.y, width, height);
        this.createInputElement();
    }

    private async loadGrowthData(): Promise<void> {
        try {
            // Ëé∑ÂèñÊàñÂàõÂª∫Áî®Êà∑ID
            let userId = localStorage.getItem('curiousTreeUserId');
            if (!userId) {
                userId = 'curious_user_' + Math.random().toString(36).substr(2, 9);
                localStorage.setItem('curiousTreeUserId', userId);
            }

            // ‰ªéAPIËé∑ÂèñÊàêÈïøÂÄº
            const response = await fetch(`/api/growth/${userId}`);
            if (response.ok) {
                const data = await response.json();
                if (data.success && data.data) {
                    this.currentGrowth = data.data.currentGrowth;
                    this.maxGrowth = data.data.maxGrowth;
                }
            } else {
                // ÂêéÂ§áÊñπÊ°àÔºö‰ªélocalStorageËé∑Âèñ
                const savedGrowth = localStorage.getItem('curiousTreeGrowth');
                this.currentGrowth = savedGrowth ? parseInt(savedGrowth) : 0;
            }
        } catch (error) {
            console.error('Âä†ËΩΩÊàêÈïøÂÄºÂ§±Ë¥•:', error);
            // ÂêéÂ§áÊñπÊ°àÔºö‰ªélocalStorageËé∑Âèñ
            const savedGrowth = localStorage.getItem('curiousTreeGrowth');
            this.currentGrowth = savedGrowth ? parseInt(savedGrowth) : 0;
        }
    }

    private createDialog(x: number, y: number, width: number, height: number): void {
        // ÂàõÂª∫‰∏ªÂÆπÂô®
        this.container = this.scene.add.container(x, y);
        this.container.setDepth(1000);

        // ‰∏ªËÉåÊôØ - Ê∏êÂèòÊïàÊûú
        this.background = this.scene.add.rectangle(0, 0, width, height, 0xffffff, 0.98);
        this.background.setStrokeStyle(5, 0x4caf50);

        // ÂàõÂª∫Â§¥ÈÉ®Âå∫Âüü
        this.createHeaderArea(width, height);

        // ÂàõÂª∫ÊàêÈïøÂÄºÊòæÁ§∫
        this.createGrowthDisplay(width, height);

        // ÂàõÂª∫ËÅäÂ§©Âå∫Âüü
        this.createChatArea(width, height);

        // ÂàõÂª∫ËæìÂÖ•Âå∫Âüü
        this.createInputArea(width, height);

        // ÂàõÂª∫ÂÖ≥Èó≠ÊåâÈíÆ
        this.createCloseButton(width, height);

        // ÂàùÂßãÊ¨¢ËøéÊ∂àÊÅØ
        this.addWelcomeMessage();

        // Ê∑ªÂä†Âà∞ÂÆπÂô®
        this.container.add([
            this.background,
            this.titleText,
            this.growthBarBg,
            this.growthBar,
            this.growthText,
            this.submitButton,
            this.submitButtonText,
            this.closeButton,
            this.responseArea,
            this.scrollContainer
        ]);

        // ÁªëÂÆö‰∫ã‰ª∂
        this.setupEvents();
    }

    private createHeaderArea(width: number, height: number): void {
        // Â§ßÊ†áÈ¢ò
        this.titleText = this.scene.add.text(0, -height / 2 + 50, 'üå≥ Â•ΩÂ•áÊ†ëÁöÑÊàêÈïøËä±Âõ≠', {
            fontSize: '36px',
            color: '#2d5016',
            fontStyle: 'bold',
            fontFamily: 'Arial, sans-serif',
            backgroundColor: 'rgba(255, 255, 255, 0.9)',
            padding: { x: 20, y: 10 }
        }).setOrigin(0.5);
    }

    private createGrowthDisplay(width: number, height: number): void {
        // ÊàêÈïøÂÄºËÉåÊôØÊù°
        this.growthBarBg = this.scene.add.rectangle(0, -height / 2 + 110, width - 100, 25, 0xe0e0e0);
        this.growthBarBg.setStrokeStyle(2, 0xcccccc);

        // ÊàêÈïøÂÄºËøõÂ∫¶Êù°
        const progress = this.currentGrowth / this.maxGrowth;
        this.growthBar = this.scene.add.rectangle(
            -(width - 100) / 2 + (width - 100) * progress / 2,
            -height / 2 + 110,
            (width - 100) * progress,
            25,
            0x4caf50
        );

        // ÊàêÈïøÂÄºÊñáÂ≠ó
        this.growthText = this.scene.add.text(0, -height / 2 + 140,
            `üå± ÂΩìÂâçÊàêÈïøÂÄº: ${this.currentGrowth}/${this.maxGrowth} - ÊØèÊ¨°ÊèêÈóÆÂíåÊÄùËÄÉÈÉΩ‰ºöËÆ©Â•ΩÂ•áÊ†ëÊàêÈïøÂì¶ÔºÅ`, {
            fontSize: '16px',
            color: '#4a7c59',
            fontStyle: 'bold',
            fontFamily: 'Arial, sans-serif'
        }).setOrigin(0.5);
    }

    private createChatArea(width: number, height: number): void {
        // ËÅäÂ§©Âå∫ÂüüËÉåÊôØ
        this.responseArea = this.scene.add.rectangle(0, -30, width - 80, height - 320, 0xf8f9fa);
        this.responseArea.setStrokeStyle(3, 0xe0e0e0);

        // ÂàõÂª∫ÊªöÂä®ÂÆπÂô®
        this.scrollContainer = this.scene.add.container(0, -height / 2 + 200);

        // ÂàõÂª∫ÈÅÆÁΩ©‰ª•Á°Æ‰øùÊñáÂ≠ó‰∏ç‰ºöË∂ÖÂá∫ËÅäÂ§©Âå∫Âüü
        const mask = this.scene.add.graphics();
        mask.fillStyle(0xffffff);
        mask.fillRect(-(width - 80) / 2, -height / 2 + 85, width - 80, height - 320);
        this.scrollContainer.setMask(mask.createGeometryMask());
    }

    private createInputArea(width: number, height: number): void {
        // Êèê‰∫§ÊåâÈíÆ - Êõ¥Â§ßÊõ¥ÈÜíÁõÆ
        this.submitButton = this.scene.add.rectangle(width / 2 - 100, height / 2 - 60, 150, 60, 0x4caf50);
        this.submitButton.setStrokeStyle(4, 0x388e3c);
        this.submitButton.setInteractive({ useHandCursor: true });

        this.submitButtonText = this.scene.add.text(width / 2 - 100, height / 2 - 60, 'üöÄ ÂêëÂ•ΩÂ•áÊ†ëÊèêÈóÆ', {
            fontSize: '20px',
            color: '#ffffff',
            fontStyle: 'bold',
            fontFamily: 'Arial, sans-serif'
        }).setOrigin(0.5);
    }

    private createCloseButton(width: number, height: number): void {
        this.closeButton = this.scene.add.rectangle(width / 2 - 40, -height / 2 + 40, 70, 70, 0xff5722, 0.9);
        this.closeButton.setStrokeStyle(4, 0xd32f2f);
        this.closeButton.setInteractive({ useHandCursor: true });

        const closeButtonText = this.scene.add.text(width / 2 - 40, -height / 2 + 40, '‚úï', {
            fontSize: '32px',
            color: '#ffffff',
            fontStyle: 'bold'
        }).setOrigin(0.5);

        this.container.add(closeButtonText);
    }

    private createInputElement(): void {
        this.inputElement = document.createElement('textarea');
        this.inputElement.placeholder = 'üå± ÂëäËØâÂ•ΩÂ•áÊ†ë‰Ω†ÊÉ≥‰∫ÜËß£‰ªÄ‰πàÂêßÔºÅÂèØ‰ª•ÈóÆ‰ªª‰ΩïËÆ©‰Ω†Â•ΩÂ•áÁöÑÈóÆÈ¢ò...';

        // ËÆæÁΩÆÊ†∑ÂºèÂ±ûÊÄß
        Object.assign(this.inputElement.style, {
            position: 'fixed',
            left: '50%',
            bottom: '100px',
            transform: 'translateX(-50%)',
            width: '650px',
            height: '80px',
            fontSize: '18px',
            padding: '15px 25px',
            border: '4px solid #4caf50',
            borderRadius: '20px',
            outline: 'none',
            fontFamily: 'Arial, sans-serif',
            background: '#ffffff',
            boxShadow: '0 6px 20px rgba(76, 175, 80, 0.3)',
            resize: 'none',
            lineHeight: '1.4',
            zIndex: '10001',
            display: 'none',
            visibility: 'hidden'
        });

        // Ê∑ªÂä†ËæìÂÖ•‰∫ã‰ª∂
        this.inputElement.addEventListener('keydown', (event) => {
            if (event.key === 'Enter' && !event.shiftKey) {
                event.preventDefault();
                this.submitQuestion();
            } else if (event.key === 'Escape') {
                event.preventDefault();
                this.close();
            }
        });

        // ËÅöÁÑ¶ÊïàÊûú
        this.inputElement.addEventListener('focus', () => {
            this.inputElement.style.borderColor = '#2196f3';
            this.inputElement.style.boxShadow = '0 8px 25px rgba(33, 150, 243, 0.4)';
        });

        this.inputElement.addEventListener('blur', () => {
            this.inputElement.style.borderColor = '#4caf50';
            this.inputElement.style.boxShadow = '0 6px 20px rgba(76, 175, 80, 0.3)';
        });

        document.body.appendChild(this.inputElement);

        // Ê∑ªÂä†Ë∞ÉËØï‰ø°ÊÅØ
        console.log('ËæìÂÖ•Ê°ÜÂ∑≤ÂàõÂª∫Âπ∂Ê∑ªÂä†Âà∞DOM:', this.inputElement);
        console.log('ËæìÂÖ•Ê°ÜÊ†∑Âºè:', this.inputElement.style.cssText);
    }

    private setupEvents(): void {
        // Êèê‰∫§ÊåâÈíÆ‰∫ã‰ª∂
        this.submitButton.on('pointerdown', () => {
            // Â¶ÇÊûúËæìÂÖ•Ê°ÜÊúâÂÜÖÂÆπÔºåÊèê‰∫§ÈóÆÈ¢òÔºõÂê¶ÂàôËÅöÁÑ¶ËæìÂÖ•Ê°Ü
            if (this.inputElement.value.trim()) {
                this.submitQuestion();
            } else {
                this.inputElement.focus();
            }
        });

        // ÂÖ≥Èó≠ÊåâÈíÆ‰∫ã‰ª∂
        this.closeButton.on('pointerdown', () => {
            this.close();
        });

        // ÊåâÈíÆÊÇ¨ÂÅúÊïàÊûú
        this.addButtonHoverEffect(this.submitButton, this.submitButtonText);
        this.addButtonHoverEffect(this.closeButton, null);
    }

    private addButtonHoverEffect(
        button: Phaser.GameObjects.Rectangle,
        text: Phaser.GameObjects.Text | null
    ): void {
        button.on('pointerover', () => {
            const targets = text ? [button, text] : [button];
            this.scene.tweens.add({
                targets,
                scaleX: 1.1,
                scaleY: 1.1,
                duration: 200,
                ease: 'Back.easeOut'
            });
        });

        button.on('pointerout', () => {
            const targets = text ? [button, text] : [button];
            this.scene.tweens.add({
                targets,
                scaleX: 1,
                scaleY: 1,
                duration: 200,
                ease: 'Back.easeOut'
            });
        });
    }

    private addWelcomeMessage(): void {
        // ÂàÜÊÆµÊòæÁ§∫Ê¨¢ËøéÊ∂àÊÅØÔºåÈÅøÂÖçÊñáÂ≠óËøáÈïø
        const welcomeMessages = [
            'üå± Ê¨¢ËøéÊù•Âà∞Â•ΩÂ•áÊ†ëÁöÑÊàêÈïøËä±Âõ≠ÔºÅ',
            'ÊàëÊòØ‰∏ÄÊ£µÂÖÖÊª°Êô∫ÊÖßÁöÑÂè§ËÄÅÂ§ßÊ†ëÔºåÊúÄÂñúÊ¨¢ÂíåÂ•ΩÂ•áÁöÑÂ∞èÊúãÂèã‰ª¨‰∏ÄËµ∑Êé¢Á¥¢‰∏ñÁïåÁöÑÂ••ÁßòÔºÅ',
            'üéâ ÊØèÂΩì‰Ω†ÊèêÂá∫ÊúâË∂£ÁöÑÈóÆÈ¢òÊàñÊ∑±ÂÖ•ÊÄùËÄÉÊó∂ÔºåÊàëÂ∞±‰ºöËåÅÂ£ÆÊàêÈïøÔºÅ',
            'Âø´Âú®‰∏ãÊñπÂëäËØâÊàë‰Ω†ÊúÄÂ•ΩÂ•áÁöÑ‰∫ãÊÉÖÂêßÔºÅËÆ©Êàë‰ª¨‰∏ÄËµ∑Âú®Áü•ËØÜÁöÑÊ£ÆÊûó‰∏≠Âø´‰πêÊàêÈïøÔΩûüå≥‚ú®'
        ];

        welcomeMessages.forEach((message, index) => {
            setTimeout(() => {
                this.addMessageToChat('ai', message);
            }, index * 800);
        });
    }

    private addMessageToChat(type: 'user' | 'ai', message: string): void {
        this.chatHistory.push({ type, message });

        const isUser = type === 'user';
        const messageY = this.chatHistory.length * 120 - 50;

        const messageContainer = this.scene.add.container(0, messageY);

        if (isUser) {
            this.createUserMessage(messageContainer, message);
        } else {
            this.createAiMessage(messageContainer, message);
        }

        this.scrollContainer.add(messageContainer);
        this.scrollToBottom();
    }

    private createUserMessage(container: Phaser.GameObjects.Container, message: string): void {
        // Áî®Êà∑Ê∂àÊÅØÊ∞îÊ≥° - Âè≥‰æßÔºåËìùËâ≤
        const maxWidth = 380;

        const messageText = this.scene.add.text(0, 0, message, {
            fontSize: '16px',
            color: '#ffffff',
            wordWrap: { width: maxWidth - 40 },
            align: 'left',
            fontFamily: 'Arial, sans-serif',
            lineSpacing: 4
        });

        const textBounds = messageText.getBounds();
        const bubbleWidth = Math.min(maxWidth, Math.max(200, textBounds.width + 40));
        const bubbleHeight = Math.max(60, textBounds.height + 20);

        const bubble = this.scene.add.rectangle(200, 0, bubbleWidth, bubbleHeight, 0x2196f3, 0.9);
        bubble.setStrokeStyle(3, 0x1976d2);

        messageText.setPosition(200, 0).setOrigin(0.5);

        // Áî®Êà∑Â§¥ÂÉè
        const userIcon = this.scene.add.text(350, 0, 'üëß', {
            fontSize: '28px'
        }).setOrigin(0.5);

        container.add([bubble, messageText, userIcon]);
    }

    private createAiMessage(container: Phaser.GameObjects.Container, message: string): void {
        // AIÊ∂àÊÅØÊ∞îÊ≥° - Â∑¶‰æßÔºåÁªøËâ≤
        const maxWidth = 380;

        const messageText = this.scene.add.text(0, 0, message, {
            fontSize: '16px',
            color: '#ffffff',
            wordWrap: { width: maxWidth - 40 },
            align: 'left',
            fontFamily: 'Arial, sans-serif',
            lineSpacing: 6
        });

        const textBounds = messageText.getBounds();
        const bubbleWidth = Math.min(maxWidth, Math.max(200, textBounds.width + 40));
        const bubbleHeight = Math.max(60, textBounds.height + 20);

        const bubble = this.scene.add.rectangle(-200, 0, bubbleWidth, bubbleHeight, 0x4caf50, 0.9);
        bubble.setStrokeStyle(3, 0x388e3c);

        messageText.setPosition(-200, 0).setOrigin(0.5);

        // AIÂ§¥ÂÉèÔºàÊ†ëÂõæÊ†áÔºâ
        const aiIcon = this.scene.add.text(-350, 0, 'üå≥', {
            fontSize: '28px'
        }).setOrigin(0.5);

        container.add([bubble, messageText, aiIcon]);
    }

    private scrollToBottom(): void {
        const containerHeight = 320; // ÂèØËßÜÂå∫ÂüüÈ´òÂ∫¶
        const contentHeight = this.chatHistory.length * 120;

        if (contentHeight > containerHeight) {
            const targetY = -(contentHeight - containerHeight);
            this.scene.tweens.add({
                targets: this.scrollContainer,
                y: targetY,
                duration: 500,
                ease: 'Power2'
            });
        }
    }

    private async submitQuestion(): Promise<void> {
        const question = this.inputElement.value.trim();

        if (this.isSubmitting || question === '') {
            this.showMessage('üåø ËØ∑ÂëäËØâÂ•ΩÂ•áÊ†ë‰Ω†ÊÉ≥‰∫ÜËß£‰ªÄ‰πàÂêßÔºÅ');
            return;
        }

        // Ê∑ªÂä†Áî®Êà∑Ê∂àÊÅØ
        this.addMessageToChat('user', question);
        this.inputElement.value = '';

        this.isSubmitting = true;
        this.submitButtonText.setText('‚è≥ Â•ΩÂ•áÊ†ëÂú®ÊÄùËÄÉ...');

        // Ê∑ªÂä†ÊÄùËÄÉ‰∏≠ÁöÑÊèêÁ§∫
        this.addMessageToChat('ai', 'ü§î Â•ΩÂ•áÊ†ëÊ≠£Âú®‰ªîÁªÜÊÄùËÄÉ‰Ω†ÁöÑÈóÆÈ¢ò...');

        try {
            // Ë∞ÉÁî®Êô∫ËÉΩËØÑÂàÜÂíåÂõûÁ≠îAPI
            const response = await fetch('/api/ai/smart-ask', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ question })
            });

            const data = await response.json();

            // ÁßªÈô§ÊÄùËÄÉÊèêÁ§∫
            const lastMessage = this.scrollContainer.list[this.scrollContainer.list.length - 1];
            if (lastMessage) {
                lastMessage.destroy();
                this.chatHistory.pop();
            }

            if (data.success) {
                this.addMessageToChat('ai', `üå≥ ${data.answer}`);

                // ‰ΩøÁî®Êô∫ËÉΩËØÑÂàÜÁ≥ªÁªüÁªô‰∫àÂ•ñÂä±
                if (data.score && data.score > 0) {
                    await this.awardGrowth(data.score, data.scoreReason || 'Â•ΩÈóÆÈ¢òÂ•ñÂä±');
                }
            } else {
                this.addMessageToChat('ai', `üçÉ Êä±Ê≠âÔºåÂ•ΩÂ•áÊ†ëÈÅáÂà∞‰∫Ü‰∏Ä‰∫õÈóÆÈ¢òÔºö${data.error || 'Êú™Áü•ÈîôËØØ'}`);
                // Âç≥‰ΩøÂ§±Ë¥•‰πüÁªô‰∏ÄÁÇπÈºìÂä±ÂàÜ
                await this.awardGrowth(2, 'ÂãáÊï¢ÊèêÈóÆÂ•ñÂä±');
            }

        } catch (error) {
            console.error('ÊèêÈóÆÂ§±Ë¥•:', error);
            // ÁßªÈô§ÊÄùËÄÉÊèêÁ§∫
            const lastMessage = this.scrollContainer.list[this.scrollContainer.list.length - 1];
            if (lastMessage) {
                lastMessage.destroy();
                this.chatHistory.pop();
            }
            this.addMessageToChat('ai', 'üçÇ Â•ΩÂ•áÊ†ëÊöÇÊó∂Âê¨‰∏çÊ∏Ö‰Ω†ÁöÑËØùÔºå‰ΩÜ‰Ω†ÁöÑÂ•ΩÂ•áÂøÉËÆ©ÊàëÂæàÂºÄÂøÉÔºÅËØ∑Á®çÂêéÂÜçËØïÂêßÔΩû');
            // Áªô‰∫àÂÆâÊÖ∞Â•ñÂä±
            await this.awardGrowth(1, 'ÂùöÊåÅÂ∞ùËØïÂ•ñÂä±');
        } finally {
            this.isSubmitting = false;
            this.submitButtonText.setText('üöÄ ÂêëÂ•ΩÂ•áÊ†ëÊèêÈóÆ');
        }
    }

    private async awardGrowth(points: number, message: string): Promise<void> {
        this.currentGrowth += points;

        // ‰øùÂ≠òÂà∞localStorage
        localStorage.setItem('curiousTreeGrowth', this.currentGrowth.toString());

        // Êõ¥Êñ∞ÊàêÈïøÊù°ÊòæÁ§∫
        this.updateGrowthDisplay();

        // ÊòæÁ§∫Â•ñÂä±Ê∂àÊÅØ
        this.showGrowthReward(`üéâ ${message} +${points} ÊàêÈïøÂÄºÔºÅ`);

        // Ê£ÄÊü•ÊòØÂê¶ÈúÄË¶ÅÂçáÁ∫ß
        if (this.currentGrowth >= this.maxGrowth) {
            this.triggerLevelUp();
        }

        // ÂêåÊ≠•Âà∞Êï∞ÊçÆÂ∫ì
        try {
            await this.saveGrowthToDatabase(points, message);
        } catch (error) {
            console.error('‰øùÂ≠òÊàêÈïøÂÄºÂà∞Êï∞ÊçÆÂ∫ìÂ§±Ë¥•:', error);
        }
    }

    private updateGrowthDisplay(): void {
        const progress = Math.min(this.currentGrowth / this.maxGrowth, 1);
        const barWidth = 800; // ÊàêÈïøÊù°ÊÄªÂÆΩÂ∫¶

        // Êõ¥Êñ∞ÊàêÈïøÊù°
        this.growthBar.setSize(barWidth * progress, 25);
        this.growthBar.x = -(barWidth) / 2 + (barWidth * progress) / 2;

        // Êõ¥Êñ∞ÊñáÂ≠ó
        this.growthText.setText(`üå± ÂΩìÂâçÊàêÈïøÂÄº: ${this.currentGrowth}/${this.maxGrowth} - ÊØèÊ¨°ÊèêÈóÆÂíåÊÄùËÄÉÈÉΩ‰ºöËÆ©Â•ΩÂ•áÊ†ëÊàêÈïøÂì¶ÔºÅ`);

        // ÊàêÈïøÊù°Âä®Áîª
        this.scene.tweens.add({
            targets: this.growthBar,
            scaleY: 1.2,
            duration: 200,
            yoyo: true,
            ease: 'Power2'
        });
    }

    private showGrowthReward(message: string): void {
        const rewardText = this.scene.add.text(
            this.container.x,
            this.container.y - 200,
            message,
            {
                fontSize: '24px',
                color: '#ffffff',
                backgroundColor: 'rgba(76, 175, 80, 0.9)',
                padding: { x: 20, y: 12 },
                fontStyle: 'bold'
            }
        ).setOrigin(0.5).setDepth(1100);

        // Â•ñÂä±Âä®Áîª
        this.scene.tweens.add({
            targets: rewardText,
            y: rewardText.y - 50,
            alpha: 0,
            scaleX: 1.2,
            scaleY: 1.2,
            duration: 2500,
            ease: 'Power2',
            onComplete: () => {
                rewardText.destroy();
            }
        });

        // Ê∑ªÂä†Èó™ÁÉÅÊïàÊûú
        const sparkles = [];
        for (let i = 0; i < 6; i++) {
            const sparkle = this.scene.add.text(
                this.container.x + (Math.random() - 0.5) * 200,
                this.container.y - 200 + (Math.random() - 0.5) * 100,
                '‚ú®',
                { fontSize: '20px' }
            ).setDepth(1101);

            sparkles.push(sparkle);

            this.scene.tweens.add({
                targets: sparkle,
                alpha: 0,
                scaleX: 1.5,
                scaleY: 1.5,
                duration: 1500,
                delay: i * 200,
                ease: 'Power2',
                onComplete: () => sparkle.destroy()
            });
        }
    }

    private triggerLevelUp(): void {
        this.currentGrowth = 0;
        this.maxGrowth += 20; // ÊØèÊ¨°ÂçáÁ∫ßÂ¢ûÂä†ÈöæÂ∫¶

        this.showMessage('üéä ÊÅ≠ÂñúÔºÅÂ•ΩÂ•áÊ†ëÈïøÂ§ß‰∫Ü‰∏ÄÂúàÔºÅËé∑ÂæóÁâπÊÆäÂ•ñÂä±ÔºÅ', 4000);

        // ÂçáÁ∫ßÁâπÊïà
        this.scene.tweens.add({
            targets: this.titleText,
            scaleX: 1.3,
            scaleY: 1.3,
            duration: 300,
            yoyo: true,
            repeat: 2,
            ease: 'Power2'
        });
    }

    private async saveGrowthToDatabase(points: number, reason: string): Promise<void> {
        try {
            const userId = localStorage.getItem('curiousTreeUserId') || 'anonymous_user';

            const response = await fetch('/api/growth/update', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    userId,
                    points,
                    reason
                })
            });

            if (response.ok) {
                const data = await response.json();
                if (data.success && data.data) {
                    // ÂêåÊ≠•ÊúçÂä°Âô®Á´ØÁöÑÊï∞ÊçÆ
                    this.currentGrowth = data.data.currentGrowth;
                    this.maxGrowth = data.data.maxGrowth;

                    if (data.message && data.message.includes('ÂçáÁ∫ß')) {
                        this.triggerLevelUp();
                    }
                }
            }
        } catch (error) {
            console.error('‰øùÂ≠òÊàêÈïøÂÄºÂà∞Êï∞ÊçÆÂ∫ìÂ§±Ë¥•:', error);
        }
    }

    private showMessage(text: string, duration: number = 2000): void {
        const message = this.scene.add.text(
            this.container.x,
            this.container.y + 300,
            text,
            {
                fontSize: '20px',
                color: '#ffffff',
                backgroundColor: 'rgba(255, 87, 34, 0.9)',
                padding: { x: 20, y: 12 },
                fontStyle: 'bold'
            }
        ).setOrigin(0.5).setDepth(1100);

        // Ê∑°Âá∫Âä®Áîª
        this.scene.tweens.add({
            targets: message,
            alpha: 0,
            y: message.y - 40,
            duration,
            ease: 'Power2',
            onComplete: () => {
                message.destroy();
            }
        });
    }

    private updateInputPosition(): void {
        // ÁÆÄÂåñÂÆö‰ΩçÈÄªËæëÔºå‰ΩøÁî®Âõ∫ÂÆöÁöÑÂ±Ö‰∏≠ÂÆö‰Ωç
        this.inputElement.style.position = 'fixed';
        this.inputElement.style.left = '50%';
        this.inputElement.style.bottom = '100px'; // Ë∑ùÁ¶ªÂ∫ïÈÉ®Âõ∫ÂÆöË∑ùÁ¶ª
        this.inputElement.style.transform = 'translateX(-50%)';
        this.inputElement.style.zIndex = '10001'; // Á°Æ‰øùÂú®ÊúÄÈ°∂Â±Ç
    }

    private showInputElement(): void {
        // ÊòæÁ§∫ËæìÂÖ•Ê°Ü
        this.inputElement.style.display = 'block';
        this.inputElement.style.visibility = 'visible';
        this.inputElement.style.opacity = '1';
        this.inputElement.style.pointerEvents = 'auto';

        this.updateInputPosition();

        // Ë∞ÉËØïËæìÂá∫
        console.log('üå≥ Â•ΩÂ•áÊ†ëËæìÂÖ•Ê°ÜÁä∂ÊÄÅ:');
        console.log('- ÊòæÁ§∫Áä∂ÊÄÅ:', this.inputElement.style.display);
        console.log('- ÂèØËßÅÊÄß:', this.inputElement.style.visibility);
        console.log('- ÈÄèÊòéÂ∫¶:', this.inputElement.style.opacity);
        console.log('- z-index:', this.inputElement.style.zIndex);
        console.log('- DOMÂÖÉÁ¥†ÊòØÂê¶Â≠òÂú®:', !!this.inputElement);
        console.log('- ÊòØÂê¶Âú®DOM‰∏≠:', document.body.contains(this.inputElement));

        // ÂàõÂª∫‰∏Ä‰∏™‰∏¥Êó∂ÁöÑÂèØËßÅÊåáÁ§∫Âô®
        const indicator = document.createElement('div');
        indicator.textContent = 'üëÜ ËæìÂÖ•Ê°ÜÂ∫îËØ•Âú®ËøôÈáåÔºÅÂ¶ÇÊûúÁúã‰∏çÂà∞ËØ∑Ê£ÄÊü•ÊµèËßàÂô®';
        Object.assign(indicator.style, {
            position: 'fixed',
            left: '50%',
            bottom: '30px',
            transform: 'translateX(-50%)',
            background: 'rgba(255, 0, 0, 0.9)',
            color: 'white',
            padding: '10px 20px',
            borderRadius: '10px',
            zIndex: '10002',
            fontSize: '16px',
            fontWeight: 'bold',
            textAlign: 'center',
            maxWidth: '400px',
            wordWrap: 'break-word'
        });
        document.body.appendChild(indicator);

        // 5ÁßíÂêéÁßªÈô§ÊåáÁ§∫Âô®
        setTimeout(() => {
            if (indicator.parentNode) {
                indicator.parentNode.removeChild(indicator);
            }
        }, 5000);

        // ËÅöÁÑ¶ËæìÂÖ•Ê°Ü
        setTimeout(() => {
            try {
                this.inputElement.focus();
                console.log('‚úÖ ËæìÂÖ•Ê°ÜÂ∑≤ËÅöÁÑ¶');
            } catch (error) {
                console.error('‚ùå ËÅöÁÑ¶ËæìÂÖ•Ê°ÜÂ§±Ë¥•:', error);
            }
        }, 500);
    }

    public show(): void {
        this.container.setVisible(true);
        this.container.setAlpha(0);
        this.container.setScale(0.8);

        this.scene.tweens.add({
            targets: this.container,
            alpha: 1,
            scaleX: 1,
            scaleY: 1,
            duration: 500,
            ease: 'Back.easeOut',
            onComplete: () => {
                // ÊòæÁ§∫ËæìÂÖ•Ê°Ü
                this.showInputElement();

                // ÁõëÂê¨Á™óÂè£Â§ßÂ∞èÂèòÂåñ
                window.addEventListener('resize', this.updateInputPosition.bind(this));
            }
        });
    }

    public hide(): void {
        if (this.inputElement) {
            this.inputElement.style.display = 'none';
            this.inputElement.style.visibility = 'hidden';
            this.inputElement.blur(); // ÁßªÈô§ÁÑ¶ÁÇπ
        }

        // ÁßªÈô§Á™óÂè£Â§ßÂ∞èÂèòÂåñÁõëÂê¨
        window.removeEventListener('resize', this.updateInputPosition.bind(this));

        this.scene.tweens.add({
            targets: this.container,
            alpha: 0,
            scaleX: 0.8,
            scaleY: 0.8,
            duration: 400,
            ease: 'Back.easeIn',
            onComplete: () => {
                this.container.setVisible(false);
            }
        });
    }

    public close(): void {
        this.hide();
        if (this.onCloseCallback) {
            this.onCloseCallback();
        }
    }

    public destroy(): void {
        // Á°Æ‰øùÁßªÈô§ËæìÂÖ•Ê°ÜÂÖÉÁ¥†
        if (this.inputElement && this.inputElement.parentNode) {
            this.inputElement.parentNode.removeChild(this.inputElement);
        }

        // ÁßªÈô§‰∫ã‰ª∂ÁõëÂê¨
        window.removeEventListener('resize', this.updateInputPosition.bind(this));

        // ÈîÄÊØÅPhaserÂÆπÂô®
        if (this.container) {
            this.container.destroy();
        }
    }
} 